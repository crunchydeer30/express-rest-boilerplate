import { Request, Response, NextFunction } from 'express';
import { HttpError } from 'http-errors';
import {
  PrismaClientUnknownRequestError,
  PrismaClientKnownRequestError,
} from '@prisma/client/runtime/library';
import { ZodError } from 'zod';
import { consoleLogger } from '../logger';

const errorHandler = (
  error: unknown,
  _req: Request,
  res: Response,
  _next: NextFunction,
) => {
  if (error instanceof HttpError) {
    return res.status(error.statusCode).json(error);
  }

  if (error instanceof PrismaClientUnknownRequestError) {
    return res.status(500).json({ message: 'Database error' });
  }

  if (error instanceof PrismaClientKnownRequestError) {
    const e = handleKnownPrismaError(error);
    return res.status(422).json(e);
  }

  if (error instanceof ZodError) {
    return res.status(422).json({
      message: error.issues,
    });
  }

  if (error instanceof Error) {
    consoleLogger.error(error.stack);
  }

  return res.status(500).json({
    code: 500,
    message: 'Internal server error',
  });
};

// Makes error messages generated by Prisma human-readable

const handleKnownPrismaError = (error: PrismaClientKnownRequestError) => {
  switch (error.code) {
    case 'P2002': {
      let message = 'Field must be unique';
      if (error.meta) {
        message = `${error.meta.target} must be unique`;
      }

      return {
        code: 400,
        message,
      };
    }
    case 'P2000': {
      let message = 'Field is too long';
      if (error.meta && error.meta.column_name !== '(not available)') {
        message = `${error.meta.column_name} is too long`;
      }
      return {
        message,
      };
    }
    default:
      return {
        code: 500,
        message: 'Database error',
      };
  }
};

export default errorHandler;
